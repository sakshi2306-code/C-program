/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    int*result=(int*)malloc(2*sizeof (int));
    for(int i=0;i<numsSize;i++){
        for(int j=i+1;j<numsSize;j++){
            if(nums[i]+nums[j]==target){
                result[0]=i;
                result[1]=j;
                *returnSize=2;
                return result;
            }
        }
    }
    *returnSize=0;
    return NULL;
    
}

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* listHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* listTail = listHead;
    listTail->val = 0;

    
    while (true) {
        int val = (l1 ? l1->val: 0) + (l2 ? l2->val: 0) + listTail->val;

        listTail->val = val % 10;
        
        l1 = l1 ? l1->next : NULL;
        l2 = l2 ? l2->next : NULL;
        
        if (l1 || l2 || val/10) {
            listTail->next = (struct ListNode*)malloc(sizeof(struct ListNode));
            listTail->next->val = val/10;
            listTail = listTail->next;
            
        }
        else {
            listTail->next = NULL;
            return listHead;
        }
    }
}

int lengthOfLongestSubstring(char* s) {
    if (!s || !*s) // Check if the string is empty
        return 0;
    
    int charIndexMap[256]; // Assuming ASCII characters
    memset(charIndexMap, -1, sizeof(charIndexMap)); // Initialize array with -1
    
    int maxLength = 0;
    int startIndex = 0;
    int i;
    
    for (i = 0; s[i] != '\0'; i++) {
        // If the character is already in the map and its index is after the start index of the current substring,
        // update the start index to the index after the last occurrence of the character
        if (charIndexMap[s[i]] != -1 && charIndexMap[s[i]] >= startIndex) {
            startIndex = charIndexMap[s[i]] + 1;
        }
        
        // Update the index of the current character
        charIndexMap[s[i]] = i;
        
        // Update the maximum length if the current substring is longer
        if (i - startIndex + 1 > maxLength) {
            maxLength = i - startIndex + 1;
        }
    }
    
    return maxLength;
}

double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2,
                              int nums2Size) {
    double* result = (double*)malloc((nums1Size + nums2Size) * sizeof(double));
    double temp;
    for (int i = 0; i < nums1Size; i++) {
        result[i] = nums1[i];
    }
    for (int i = nums1Size; i < nums1Size + nums2Size; i++) {
        result[i] = nums2[i - nums1Size];
    }
    for (int i = 0; i < nums1Size + nums2Size - 1; i++) {
        for (int j = 0; j < nums1Size + nums2Size - i - 1; j++) {
            if (result[j] > result[j + 1]) {
                temp = result[j];
                result[j] = result[j + 1];
                result[j + 1] = temp;
            }
        }
    }
    if ((nums1Size + nums2Size) % 2 == 0) {
        return ((result[((nums1Size + nums2Size) / 2) - 1] +
                 result[((nums1Size + nums2Size) / 2)])) /
               2;
    }
    return result[((nums1Size + nums2Size) / 2)];
}

char * convert(char * s, int numRows){
    int size = strlen(s) + 5;
    if (numRows == 1 || size-5 <= numRows ) return s;
    
    char **zigzag = (char**)calloc(numRows * size, sizeof(char));
    for(int i = 0; i < numRows; i++) *(zigzag + i) = (char*) calloc(size, sizeof(char));
    
    int direction = -1, level = 0, i = 0; 
    while( s[i] != '\0' ){
        strncat(zigzag[level], &s[i++], 1);
        if ( level % (numRows-1) == 0 ) direction *= -1;
        level += direction;
    }
    strcpy(s, "");
    for(int i = 0; i < numRows; i++)strcat(s, zigzag[i]);
    
    for(int i = 0; i < numRows; i++){
        free(*(zigzag + i));
    }
    free(zigzag);
    return s;
}

#include <limits.h>

int reverse(int x) {
    long r = 0;
    while (x != 0) {
        r = r * 10 + x % 10;
        x = x / 10;
    }
    if (r > INT_MAX || r < INT_MIN) {
        return 0;
    }
    return (int)r;
}

#include <limits.h>
#define FALSE 0
#define TRUE 1

int isNum(char num){
    return num >= '0' && num <= '9';
}

int charToInt(char c){
    return c - '0';
}

int check_overflow(unsigned int num1, int num2, int minus){
    int flag1 = num1 > (INT_MAX - num2) / 10;
    if(!minus) return flag1;
    

    int flag2 = - num1 < (INT_MIN + num2) / 10;   
    return flag1 && flag2;
    
}

int myAtoi(char* s) {
    int minus = FALSE;
    int sign = FALSE;
    unsigned int num = 0;
    int temp;

    while(*s == ' ') s++;

    switch(*s){
        case '-':
            minus = TRUE;
        case '+':
            sign = TRUE;
            s++;
    }
    
    while(*s != '\0'){
        if (isNum(*s)) {
            temp = charToInt(*s);
            if(check_overflow(num, temp, minus))
                return minus ? INT_MIN : INT_MAX;
            num = 10 * num + temp;
            s++;
        } else {
            break;
        }
    }

    if(minus) num *= -1;

    return num;
}

bool isPalindrome(int x) {
    if (x < 0) {
        return false;
    }

    long original = x;
    long reversed = 0;

    while (x > 0) {
        reversed = reversed * 10 + x % 10;

        x /= 10;
    }

    return original == reversed;
}

char* intToRoman(int num) {
    static char result[20];
    int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
    char* symbols[] = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
    
    int i = 0;
    result[0] = '\0';
    
    for (i = 0; num > 0; i++) {
        while (num >= values[i]) {
            strcat(result, symbols[i]);
            num -= values[i];
        }
    }
    
    return result;
}

int getValue(const char * s){
    switch(*s) {
        case 'I': return (s[1] == 'V' || s[1] == 'X') ? -1 : 1;
        case 'X': return (s[1] == 'L' || s[1] == 'C') ? -10 : 10;
        case 'C': return (s[1] == 'D' || s[1] == 'M') ? -100 : 100;
        case 'V': return 5;
        case 'L': return 50;
        case 'D': return 500;
        case 'M': return 1000;
    }
    return 0;
}

int romanToInt(char * s){
    int result = 0; 
    
    for(;*s != '\0'; ++s) {
        result += getValue(s);
    }
    return result;
}

char* longestCommonPrefix(char** strs, int strsSize) {
    if(strsSize == 0) return "";
    int minLen = strlen(strs[0]);
    for(int i = 1;i < strsSize;i++)
    {
        int len = strlen(strs[i]);
        if(len < minLen) minLen = len;
    }
    char* prefix = (char*)malloc((minLen+1)*sizeof(char));
    int i;
    for(i = 0;i < minLen;i++)
    {
        char c = strs[0][i];
        for(int j = 1;j < strsSize;j++)
        {
            if(strs[j][i] != c) 
            {
                prefix[i] = '\0';
                return prefix;
            }
        }
        prefix[i] = c;
    }
    prefix[i] = '\0';
    return prefix;
}

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
// Function to compare integers for qsort
int compare(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

// Function to check if the sum of three elements is zero
int isSumZero(int a, int b, int c) {
    return (a + b + c == 0);
}

// Function to find all unique triplets with sum zero
int **threeSum(int *nums, int numsSize, int *returnSize, int **returnColumnSizes) {
    // Sorting the array is essential for handling duplicates efficiently
    qsort(nums, numsSize, sizeof(int), compare);

    int capacity = 4; // Initial capacity for the result array
    int **result = (int **)malloc(capacity * sizeof(int *));
    *returnSize = 0;

    for (int i = 0; i < numsSize - 2; i++) {
        if (i > 0 && nums[i] == nums[i - 1]) {
            continue; // Skip duplicate elements
        }

        int left = i + 1;
        int right = numsSize - 1;

        while (left < right) {
            int sum = nums[i] + nums[left] + nums[right];

            if (sum < 0) {
                left++;
            } else if (sum > 0) {
                right--;
            } else {
                // Found a triplet with sum zero
                result[*returnSize] = (int *)malloc(3 * sizeof(int));
                result[*returnSize][0] = nums[i];
                result[*returnSize][1] = nums[left];
                result[*returnSize][2] = nums[right];
                (*returnSize)++;

                // Skip duplicate elements
                while (left < right && nums[left] == nums[left + 1]) {
                    left++;
                }
                while (left < right && nums[right] == nums[right - 1]) {
                    right--;
                }

                left++;
                right--;

                // Resize the result array if needed
                if (*returnSize == capacity) {
                    capacity *= 2;
                    result = (int **)realloc(result, capacity * sizeof(int *));
                }
            }
        }
    }

    // Set returnColumnSizes to store the size of each row in the result array
    *returnColumnSizes = (int *)malloc((*returnSize) * sizeof(int));
    for (int i = 0; i < *returnSize; i++) {
        (*returnColumnSizes)[i] = 3;
    }

    return result;
}


int compare(const void *a, const void *b){
  return *(int*)a - *(int*)b;
}
int threeSumClosest(int* nums, int numsSize, int target){
  int result = nums[0] + nums[1] + nums[2];
  int limit = numsSize - 1, second, third, dis = abs(result - target), temp1, temp2;
  
  qsort(nums, numsSize, sizeof(int), compare);
  for(int first = 0; first < limit; first++){
    second = first + 1;
    third = limit;
    while(second < third){
      temp1 = nums[first] + nums[second] + nums[third];
      temp2 = abs(temp1 - target);
      if (temp2 < dis) {
        dis = temp2;
        result = temp1;
      }
      if (result == target) return result;
      else if (temp1 > target) third--;
      else if (temp1 < target) second++;
    }
  }
  return result;
}

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
 /**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
struct DynArray {
  int** array;
  int size;
  int capacity;
} dArray;
int compare(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

// Function to check if the sum of three elements is zero
int isSumTarget(int a, int b, int c, int d, int target) {
    return (a + b + c +d == target);
}
void array_alloc(struct DynArray* dynArray){
    // if (dynArray->capacity==0){
    //     dynArray->array=(int**)malloc(10*sizeof(int*));
    //     dynArray->capacity=10;
    // }
    if (dynArray->size==dynArray->capacity){
        int** palceholder=(int**)realloc((void*)dynArray->array,(dynArray->capacity*2)*sizeof(int*));
        dynArray->array=palceholder;
        dynArray->capacity*=2;
    }
    dynArray->array[dynArray->size]=(int*)malloc(4*sizeof(int));

}

void finalize_array(struct DynArray* dynArray){
    int** palceholder=(int**)realloc((void*)dynArray->array,dynArray->size*sizeof(int*));
    dynArray->array=palceholder;
}

int** fourSum(int* nums, int numsSize, int target, int* returnSize, int** returnColumnSizes) {
    qsort(nums, numsSize, sizeof(int), compare);
    dArray.array=(int**)malloc(4*sizeof(int*));
    dArray.size=0;
    dArray.capacity=4;
    for (int i=0; i<numsSize-3; i++){
        if (i > 0 && nums[i] == nums[i - 1]) {
            continue; // Skip duplicate elements
        }
        for (int j=i+1;j<numsSize-2;j++){
            if (nums[j] == nums[j -1 ]&&j>i+1) {
            continue; // Skip duplicate elements
            }

            int left = j + 1;
            int right = numsSize - 1;

            while (left < right) {
                long int agg = (long int)target-nums[i]-nums[j] - nums[left] - nums[right];
                // fprint(sum);
                // array_alloc(&dArray);
                // dArray.array[dArray.size][0]=sum;
                // dArray.array[dArray.size][1]=sum;
                // dArray.array[dArray.size][2]=sum;
                // dArray.array[dArray.size][3]=sum;
                // dArray.size++;
                if (agg>0) {
                    left++;
                } else if (agg<0) {
                    right--;
                } else {
                    // Found a triplet with sum zero
                    array_alloc(&dArray);
                    dArray.array[dArray.size][0]=nums[i];
                    dArray.array[dArray.size][1]=nums[j];
                    dArray.array[dArray.size][2]=nums[left];
                    dArray.array[dArray.size][3]=nums[right];
                    dArray.size++;

                    // Skip duplicate elements
                    while (left < right && nums[left] == nums[left + 1]) {
                        left++;
                    }
                    while (left < right && nums[right] == nums[right - 1]) {
                        right--;
                    }

                    left++;
                    right--;
                    // break;
                }
            }
        }
    }

                        
    finalize_array(&dArray);
    *returnSize=dArray.size;
    int* columnArray=(int*)malloc(dArray.size*sizeof(int));
    for (int i=0;i<dArray.size;i++)columnArray[i]=4;
    *returnColumnSizes=columnArray;
    // for(int i=0; i<dArray.size; i++) returnColumnSizes[i]=
    return dArray.array;
    // return &array;
}

struct ListNode* removeNthFromEnd(struct ListNode* head, int n) {
  struct ListNode*q1=head,*q2=head;
  while(n--)
  {
      q1=q1->next;
  }
  if(q1==NULL)
  {
      return q2->next;
  }
  while(q1->next!=NULL)
  {
      q1=q1->next;
      q2=q2->next;
  }
  q2->next=q2->next->next;
  return head;
}

// Stack structure
struct Stack {
    char a[10000];
    int top;
} st;
void push(char val) {
    st.a[++st.top] = val;
}
void pop(){
    st.top--;
}
bool isEmpty(){
    return st.top == -1;
}
char peek(){
    return st.a[st.top];
}
bool isValid(char* s) {
    st.top = -1;
    for(int i = 0; s[i] != '\0';i++){
        char ch = s[i];
        if(ch == '(' || ch == '{' || ch == '[' ){
            push(ch);
        }
        else{
            if(isEmpty()){
                return false;
            }
            char in = peek();
            if((in == '(' && ch == ')') ||
                (in == '[' && ch == ']') ||
                (in == '{' && ch == '}') 
            ){
                pop();
            }
            else{
                return false;
            }
        }
    }
    return isEmpty();
}

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){
    if(list1==NULL&&list2==NULL)
    return NULL;
    if(list1==NULL)
    return list2;
    if(list2==NULL)
    return list1;
    struct ListNode* last, *third;
    if(list1->val<list2->val)
    {
        third=list1;
        last=list1;
        list1=list1->next;
        last->next=NULL;
    }
    else
    {
        third=list2;
        last=list2;
        list2=list2->next;
        last->next=NULL;
    }
    while(list1!=NULL&&list2!=NULL)
    {
        if(list1->val<list2->val)
        {
        last->next=list1;
        last=list1;
        list1=list1->next;
        last->next=NULL;
        }
        else
        {
            last->next=list2;
            last=list2;
            list2=list2->next;
            last->next=NULL;
        }
    }
    while(list1!=NULL)
    {
        last->next=list1;
        last=list1;
        list1=list1->next;
        last->next=NULL;
    }
    while(list2!=NULL)
    {
        last->next=list2;
        last=list2;
        list2=list2->next;
        last->next=NULL;
    }
    return third;


}

void generate(char **result, char * temp, int n, int left, int right, int * count, int idx)
{
    if(left == 0 && right == 0)
    {
        result[*count] = (char *)calloc(2*n + 1, sizeof(char));
        sprintf(result[(*count)++], "%s", temp); 
        return;
    }
    if(left > 0)
    {
        temp[idx] = '(';
        generate(result, temp, n, left - 1, right + 1, count, idx + 1);
    }
    if(right > 0)
    {
        temp[idx] = ')';
        generate(result, temp, n, left, right - 1, count, idx + 1);
    }
}

char ** generateParenthesis(int n, int* returnSize){
    char ** result = (char **)malloc(2000*sizeof(char *));
    char * temp = (char *)calloc(2*n + 1, sizeof(char));
    int len = 0;
    generate(result, temp, n, n, 0, &len, 0);
    *returnSize = len;
    return result;
}

//merge and startMerge work as a singular function
//they accomplish the merge of two linked lists
//most of the code in these two functions is
//just checking in which way we should proceed with the
//sorting and the going down the linked lists
void merge(struct ListNode* node1, struct ListNode* node2, struct ListNode* ptr) {
    if (node1 == NULL && node2 == NULL) {
        return;
    }
    if (node1 == NULL) {
        ptr->next = node2;
        merge(NULL, node2->next, ptr->next);
    } else if (node2 == NULL) {
        ptr->next = node1;
        merge(node1->next, NULL, ptr->next);
    } else {
        if (node1->val <= node2->val) {
            ptr->next = node1;
            merge(node1->next, node2, ptr->next);
        } else {
            ptr->next = node2;
            merge(node1, node2->next, ptr->next);
        }
    }
    return;
}
//starts the merge, just a way to simplify things functionally :)
struct ListNode* startMerge(struct ListNode* node1, struct ListNode* node2) {
    if (node1 == NULL && node2 == NULL) {
        return NULL;
    }
    struct ListNode* ptr;
    if (node1 == NULL) {
        ptr = node2;
        merge(NULL, node2->next, ptr);
    } else if (node2 == NULL) {
        ptr = node1;
        merge(node1->next, NULL, ptr);
    } else {
        if (node1->val <= node2->val) {
            ptr = node1;
            merge(node1->next, node2, ptr);
        } else {
            ptr = node2;
            merge(node1, node2->next, ptr);
        }
    }
    return ptr;
}
struct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {
    //usual thing, checks if the list is small enough in order
    //to end the program ealier than necessary
    if (listsSize == 0) {
        return NULL;
    }
    if (listsSize == 1) {
        return lists[0];
    }
    //creation of pointers and then loop happens
    int j = 0;
    int i = 0;
    int currentSize = listsSize;
    //it plays around with the size of the array
    //in order to iterate through it
    while (currentSize > 1) {
        lists[i] = startMerge(lists[j], lists[j + 1]);
        i++;
        j += 2;
        currentSize--;
        if (j + 1 == listsSize) {
            lists[i] = lists[j];
            j = 0;
            i = 0;
            listsSize = currentSize;
        } else if (j >= listsSize) {
            j = 0;
            i = 0;
            listsSize = currentSize;
        }
    }
    return lists[0];
}

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* swapPairs(struct ListNode* head){
    struct ListNode *p, *q = head, *r;
    if(head == NULL || head->next == NULL)
        return head;
    p = head->next;
    while(p != NULL)
    {
        if(q == head)
        {
            head->next = p->next;
            p->next = head;
            head = p;
            r = head->next;
            if(r->next != NULL)
            {
                q = r->next;
                p = q->next;
            }
            else
                p = NULL;
        }
        else
        {
            r->next = p;
            q->next = p->next;
            r = p->next = q;
            q = q->next;
            if(q != NULL)
                p = q->next;
            else
                p = NULL;
        }
    }
    return head;
}

int removeDuplicates(int nums[], int numsSize) {
    if (numsSize == 0)
        return 0;
    int index = 1;
    for (int i = 1; i < numsSize; ++i) {
        if (nums[i] != nums[i - 1]) {
            nums[index] = nums[i];
            ++index;
        }
    }
    return index;
}

int removeElement(int* nums, int numsSize, int val) {
    if(numsSize==0){
        return 0;
    }
    int j=0;
    for(int i=0;i<numsSize;i++){
        if(nums[i]!=val){
            nums[j++]=nums[i];
        }
    }
    return j;
}

int strStr(char * haystack, char * needle){
    if (strlen(needle) > strlen(haystack))
        return -1;

    for (int i = 0; i < strlen(haystack); i++) {
        if (!strncmp(haystack + i, needle, strlen(needle))) 
            return i;
    }

    return -1;
}

// Glibc's implementation of abs uses multiplication for negative numbers and is undefined for
// INT_MIN as per the standard, because the return type is also a signed integer.
inline uint32_t uabs(int i)
{
    return i < 0 ? ~(uint32_t) i + 1 : i;
}

int divide(int dividend, int divisor) {
    // Get rid of signs because bitwise math is easier with positive numbers
    uint32_t remainder = uabs(dividend);
    uint32_t positiveDivisor = uabs(divisor);
    
    // Long division algorithm everyone learned in grade school, except in binary instead of decimal
    uint32_t result = 0;
    for (int i = 31; i >= 0; --i) {
        uint32_t curDividend = remainder >> i;
        if (curDividend >= positiveDivisor) {
            result += 1u << i;
            remainder -= positiveDivisor << i;
        }
    }
    
    // Reintroduce the sign as appropriate
    if ((dividend > 0 && divisor > 0) || (dividend < 0 && divisor < 0)) {
        return result >= (uint32_t) INT_MAX ? INT_MAX : (int) result;
    }
    else {
        // Invert bits and add one instead of multiplying by -1
        return result > (uint32_t) INT_MAX ? INT_MIN : ((int) ~result) + 1;
    }
}

typedef struct {
    char* key;
    int count;
    UT_hash_handle hh;
} wordcout_t;

void add_word(wordcout_t** wc, char* key) {
    wordcout_t* existing_wc;
    HASH_FIND_STR(*wc, key, existing_wc);
    if (existing_wc == NULL) {
        wordcout_t* new_wc = malloc(sizeof(wordcout_t));
        new_wc->key = strdup(key);
        new_wc->count = 0;
        HASH_ADD_STR(*wc, key, new_wc);
        existing_wc = new_wc;
    }
    existing_wc->count++;
}

int* entry(wordcout_t** wc, wordcout_t** existing_wc, char* key) {
    HASH_FIND_STR(*wc, key, *existing_wc);
    if (*existing_wc == NULL) {
        wordcout_t* new_wc = malloc(sizeof(wordcout_t));
        new_wc->key = strdup(key);
        new_wc->count = 0;
        HASH_ADD_STR(*wc, key, new_wc);
        *existing_wc = new_wc;
    }
    return &(*existing_wc)->count;
}

void copy_hashmap(wordcout_t** des, wordcout_t** src) {
    wordcout_t* wc, *p, *tmp;
    HASH_ITER(hh, *src, p, tmp) {
        wc = malloc(sizeof(wordcout_t));
        wc->key = strdup(p->key);
        wc->count = p->count;
        HASH_ADD_STR(*des, key, wc);  
    }
}

int* findSubstring(char* s, char** words, int wordsSize, int* returnSize) {
    wordcout_t  *p, *tmp, *need = NULL, *orig = NULL;

    for (int i = 0; i < wordsSize; i++) add_word(&orig, words[i]);

    int n = strlen(s);
    int m = wordsSize;
    int w = strlen(words[0]);
    int total_words_len = m * w;
    
    int* result = malloc(sizeof(int) * n);
    int result_count = 0;

    char word[31] = {0}, prev[31] = {0};
    for (int i = 0; i < w; i++) {
        copy_hashmap(&need, &orig);  
        int valid = 0;
        for(int j = i; j <= n - w; j += w) {
            strncpy(word, s + j, w);
            word[w] = '\0';
            HASH_FIND_STR(need, word, tmp);
            if (tmp && tmp->count > 0) valid += 1;

            (*entry(&need, &tmp, word)) -= 1;
            if (j >= total_words_len) {
                int idx = j - total_words_len;
                strncpy(prev, s + idx, w);
                prev[w] = '\0';
                int* num = entry(&need, &tmp, prev);
                *num += 1;
                if (*num > 0) { valid--;}
            }
            if (valid == m) {result[result_count++] = j + w - total_words_len;}
        }
        HASH_CLEAR(hh, need);
    }
    *returnSize = result_count;
    return result;
}





